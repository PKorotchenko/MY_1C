{Модуль документа
Процедура ОбработкаПроведения (Отказ, РежимПроведения)

  //если нам нужно передать доп. параметры///
  //ДопПараметры = ПроведениеДокументов. ДопПараметрыИнициализироватьДанныеДокументаДляПроведения () ;
  //ДопПараметры. ДополнительныеСвойства - ДополнительныеСвойства;
  //
  //ПроведениеДокументов. ОбработкаПроведенияДокумента (ЭтотОбъект, Отказ, ДопПараметры);

  ПроведениеДокументов. ОбработкаПроведенияДокумента (ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ПередЗаписью (Отказ, РежимЗаписи, РежимПроведения)

  Если ОбменДанными. Загрузка
      Возврат;
  КонецЕсли;

ПроведениеДокументов. ПередЗаписьюДокумента (ЭтотОбъект, РежимЗаписи, РежимПроведения) ;

КонецПроцедуры
}

Модуль Менеджера Документа
{
// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
  МеханизмыДокумента.Добавить("УчетныеМеханизмыПроведенияСвоихДокументов") ;
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
функция ДанныеДокументаДляПроведения (Документ, Регистры, ДопПараметры = Неопределено) Экспорт

  Если ДопПараметры = Неопределено Тогда
    ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения () ;
  КонецЕсли;

Запрос = Новый Запрос;
ТекстыЗапроса = Новый СписокЗначений;

Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
  // Создадим запрос инициализации движений
  Запрос.УстановитьПараметр("Ссылка", Документ);
  // Сформируем текст запроса
  ТекстЗапросаТаблица(Запрос, ТекстыЗапроса, Регистры);
КонецЕсли;

// Получим таблицы для движений
Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);

Конецфункции

Функция ТекстЗапросаТаблица (Запрос, ТекстыЗапроса, Регистры)

ИмяРегистра = "РегистрНакопленияТестированиеПроведения";

Если НЕ ПроведениеДокументов. ТребуетсяТаблицаДляДвижений (ИмяРегистра, Регистры) Тогда
  Возврат "";
КонецЕсли;

ТекстЗапроса =
"ВЫБРАТЬ
|ДокументДляПроведенияТабличнаяЧастьДляПроведения. Номенклатура КАК Номенклатура,
|ДокументДляПроведенияТабличнаяЧастьДляПроведения. Количество КАК Количество,
|ДокументДляПроведения. Дата КАК Период
|ИЗ
|Документ.ДокументДляПроведения.ТабличнаяЧастьДляПроведения КАК ДокументДляПроведенияТабличнаяЧастьДляПроведения
|ЛЕВОЕ СОЕДИНЕНИЕ Документ. ДокументДляПроведения КАК ДокументДляПроведения
|ПО ДокументДляПроведенияТабличнаяЧастьДляПроведения. Ссылка = ДокументДляПроведения. Ссылка
|ГДЕ
|ДокументДляПроведения.Ссылка = &Ссылка";

ТекстыЗапроса. Добавить (ТекстЗапроса, ИмяРегистра);
Возврат ТекстЗапроса;

Конецфункции

}


Далее для движения своих документов мы создаем свой ОБЩИЙ МОДУЛЬ " " (Сервер, Внешнее соединение)
В тексте модуля создаемтпроцедуры:
{
#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
//для новых механизмов проведения
Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма ();
ТипДокумента = ТипЭнч(Документ);

// Проведение
Если Свойства.РежимЗаписи = РежимЗаписиДокумента. Проведение Тода
  Если ТипДокумента = Тип("ДокументОбъект.ДокументДляПроведения") Тогда
    Параметры. ПодчиненныеРегистры. Добавить(Метаданные.РегистрыНакопления.РегистрНакопленияТестированиеПроведения);
  КонецЕсли;
КонецЕсли;

// Контроль
Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда

//если нам нужен контроль///
  //Если Не Свойства. ЭтоНовый Тогда
    //Если ТипДокумента = Тип ("ДокументОбъект. ДокументДляПроведения") Тогда
      //Параметры. КонтрольныеРегистрыИзменений. Добавить (Метаданные. РегистрыНакопления. РегистрНакопленияТестированиеПроведения) ;
    //КонецЕсли;
  //КонецЕсли;
КонецЕсли;

// Контроль даты запрета
Если Свойства. РежимЗаписи <> РежимЗаписиДокумента. Запись Тогда

//если нам нужен контроль////
//Если Не Свойства. ЭтоНовый Тогда
  //Если ТипДокумента = Тип ("ДокументОбъект.ДокументДляПроведения") Тогда
    //Параметры. КонтрольныеРегистрыДатаЗапрета. Добавить (Метаданные. РегистрыНакопления. РегистрНакопленияТестированиеПроведения) ;
  //КонецЕсли;
//КонецЕсли;
КонецЕсли;

Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	//здесь пишем тексты запросов для контроля сторнирования
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	//здесь пишем тексты запросов для контроля даты запрета
 Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам производства.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	  ИмяТаблицыРегистрНакопленияТестированиеПроведения = "Таблица" + "РегистрНакопленияТестированиеПроведения";
    Если ТаблицыДляДвижений.Свойство(ИмяТаблицыРегистрНакопленияТестированиеПроведения) Тогда
        ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РегистрНакопленияТестированиеПроведения");
    КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движений по регистру.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "УникальныйИдентификатор");
	
	ТаблицаСтруктураЗаказа = Неопределено;
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаСтруктураЗаказа", ТаблицаСтруктураЗаказа) Тогда
		ЗаписатьНоменклатуру(ИдентификаторДокумента, ТаблицаСтруктураЗаказа);
	КонецЕсли;
	
	ТаблицаТрудозатратыСтруктурыЗаказа = Неопределено;
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаТрудозатратыСтруктурыЗаказа", ТаблицаТрудозатратыСтруктурыЗаказа) Тогда
		ЗаписатьТрудозатраты(ИдентификаторДокумента, ТаблицаТрудозатратыСтруктурыЗаказа);
	КонецЕсли;
		
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	//здесь пишем тексты запросов для контроля отрицательных остатков
	Возврат;
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	Возврат; // в текущей конфигурации дополнительных действий не предусмотрено
	
КонецПроцедуры

#КонецОбласти
}

Переходим в общий модуль ОбработкаПроведения 
{

// Описывает учетные механизмы используемые в конфигурации.
//
// Возвращаемое значение:
// 	Структура Из КлючИЗначение - Где:
// 			* Ключ - Строка - Имя механизма
// 			* Значение - Строка - Имя модуля менеджера
Функция УчетныеМеханизмыКонфигурации() Экспорт
	
	МеханизмыКонфигурации = Новый Структура;
	
	МеханизмыКонфигурации.Вставить("АдресныйСклад", "СкладыСервер");
	//++ НЕ УТ
	МеханизмыКонфигурации.Вставить("Бюджетирование", "БюджетированиеСервер");
	//-- НЕ УТ
	МеханизмыКонфигурации.Вставить("Взаиморасчеты", "ВзаиморасчетыСервер");
	МеханизмыКонфигурации.Вставить("ВнутреннееТовародвижение", "ВнутреннееТовародвижение");
	//++ НЕ УТКА
	МеханизмыКонфигурации.Вставить("ДоступностьРабочихЦентров", "УчетДоступностиРабочихЦентров");
	//-- НЕ УТКА
	МеханизмыКонфигурации.Вставить("Закупки", "Закупки");
	//++ НЕ УТКА
	МеханизмыКонфигурации.Вставить("МеждународныйУчет", "МеждународныйУчетПроведениеСервер");
	//-- НЕ УТКА

	//++ НЕ УТ
	МеханизмыКонфигурации.Вставить("НематериальныеАктивы", "НематериальныеАктивыСервер");
	//-- НЕ УТ

	//++ НЕ УТКА
	МеханизмыКонфигурации.Вставить("НСИПроизводства", "УправлениеДаннымиОбИзделиях");
	//-- НЕ УТКА
	МеханизмыКонфигурации.Вставить("Обеспечение", "РаспределениеЗапасовДвижения");
	МеханизмыКонфигурации.Вставить("ОборотныеРегистрыУправленческогоУчета", "УправленческийУчетПроведениеСервер");
	МеханизмыКонфигурации.Вставить("ОперативныйУчетТоваровОрганизаций", "ЗапасыСервер");
	//++ НЕ УТ
	МеханизмыКонфигурации.Вставить("ОсновныеСредства", "ОсновныеСредстваСервер");
	МеханизмыКонфигурации.Вставить("ПередачаВПереработку", "ПереработкаНаСтороне");
	//-- НЕ УТ
	МеханизмыКонфигурации.Вставить("ПередачаНаОтветхранение", "ПередачаНаОтветхранение");
	МеханизмыКонфигурации.Вставить("ПланированиеЗапасов", "Планирование");
	МеханизмыКонфигурации.Вставить("ПланированиеКонтрольДенежныхСредств", "ЛимитыРасходованияДенежныхСредствСервер");
	МеханизмыКонфигурации.Вставить("ПодарочныеСертификаты", "ПодарочныеСертификатыСервер");
	//++ НЕ УТКА
	МеханизмыКонфигурации.Вставить("ПриемВПереработку", "ДавальческаяСхема");
	//-- НЕ УТКА
	МеханизмыКонфигурации.Вставить("ПриемНаОтветхранение", "ПриемНаОтветхранение");
	МеханизмыКонфигурации.Вставить("Продажи", "Продажи");
	МеханизмыКонфигурации.Вставить("ОформлениеОтчетовКомитентуОЗакупках", "РегистрыНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках");
	//++ НЕ УТ
	МеханизмыКонфигурации.Вставить("Производство", "ПроизводствоСервер");
	//-- НЕ УТ

	//++ НЕ УТКА
	МеханизмыКонфигурации.Вставить("СтруктураЗаказа", "СтруктураЗаказаПроведениеДокументов");
	//-- НЕ УТКА
	МеханизмыКонфигурации.Вставить("РасчетыСПодотчетниками", "РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц");
	МеханизмыКонфигурации.Вставить("РеестрДокументов", "РегистрыСведений.РеестрДокументов");
	//++ НЕ УТ
	МеханизмыКонфигурации.Вставить("РезервыПоСомнительнымДолгам", "НачислениеСписаниеРезервовПоСомнительнымДолгамСервер");
	МеханизмыКонфигурации.Вставить("РезервыПредстоящихРасходов", "РезервыПредстоящихРасходов");
	//-- НЕ УТ
	МеханизмыКонфигурации.Вставить("СебестоимостьИПартионныйУчет", "ПартионныйУчетСервер");
	МеханизмыКонфигурации.Вставить("СерийныйУчет", "РегистрыНакопления.ДвиженияСерийТоваров");
	МеханизмыКонфигурации.Вставить("СуммыДокументовВВалютахУчета", "РегистрыСведений.СуммыДокументовВВалютахУчета");
	МеханизмыКонфигурации.Вставить("УправлениеАссортиментом", "АссортиментСервер");
	//++ НЕ УТКА
	МеханизмыКонфигурации.Вставить("УправлениеРемонтами", "УправлениеРемонтами");
	//-- НЕ УТКА
	МеханизмыКонфигурации.Вставить("УчетДенежныхСредств", "ДенежныеСредстваСервер");
	МеханизмыКонфигурации.Вставить("УчетДоходовРасходов", "ДоходыИРасходыСервер");
	МеханизмыКонфигурации.Вставить("УчетНДС", "УчетНДСУП");
	//++ НЕ УТ
	МеханизмыКонфигурации.Вставить("УчетНЗП", "УчетНЗП");
	//-- НЕ УТ
	МеханизмыКонфигурации.Вставить("УчетПрочихАктивовПассивов", "ПрочиеАктивыПассивыСервер");
	МеханизмыКонфигурации.Вставить("УчетРабот", "РегистрыНакопления.МатериалыИРаботыВПроизводстве");
	МеханизмыКонфигурации.Вставить("ФинансовыеИнструменты", "РегистрыНакопления.РасчетыПоФинансовымИнструментам");
	МеханизмыКонфигурации.Вставить("ФинансовыйРезультат", "РегистрыНакопления.ФинансовыеРезультаты");
	МеханизмыКонфигурации.Вставить("ЦеныИСкидки", "Ценообразование");
	
	//++ НЕ УТ
	МеханизмыКонфигурации.Вставить("ОбесценениеВНА", "ОбесценениеВНАСервер");
	//-- НЕ УТ
	
  /////наш общий модуль//////////
  МеханизмыКонфигурации. Вставить ("УчетныеМеханизмыПроведенияСвоихДокументов","УчетныеМеханизмыПроведенияСвоихДокументов");
	
 МеханизмыКонфигурации.Вставить("ТМЦВЭксплуатации", "ТМЦВЭксплуатацииСервер");
	
	ПроведениеДокументовЛокализация.ДополнитьУчетныеМеханизмыКонфигурации(МеханизмыКонфигурации);
	
	Возврат МеханизмыКонфигурации;
	
КонецФункции

}
